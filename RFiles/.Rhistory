install.packages("KernSmooth")
library(KernSmooth)
x<-1
x
print (x)
x<-
#
s
x<-2
x
x<-1:3
y<-10:12
cbind(x,y)
rbind(x,y)
rbind(y,x)
m<-matrix(nrow=2,ncol=3)
m
dim(m)
dim(m)<-c(2,5)
m<-1:10
m
dim(m)<-c(2,5)
m
m<-1:6
dim(m)<-(2,5)
dim(m)<-c(2,5)
dim(m)<-c(2,3)
m
m<-1:10
dim(m)<-c(2,3)
clear()
clr
defaults write org.R-project.R force.LANG en_US.UTF-8
function(lm)
function(Lm)
;
Lm()
x<-factor (c("yes","yes","no","no","no","draw"))
x<-factor (c("no","no","no","draw","yes","yes"))
x<-factor (c("a","a","a","c","b","b"))
x<-factor (c("yes","yes","no","no","no","draw"))
y<-factor (c("no","no","no","draw","yes","yes"))
z<-factor (c("a","a","a","c","b","b"))
z<-factor(c("a","a","a","c","b","b")),levels=c("c","b","a")
z<-factor(c("a","a","a","c","b","b")) levels=c("c","b","a")
z<-factor(c("a","a","a","c","b","b")) levels=c("a","b","c")
z<-factor(c("a","a","a","c","b","b"), levels=c("c","b","a"))
a<-available.packages()
head(rownames(a),3)
a
ls()
a<-vector(mode="character", length = 20)
rmv a
a<-rmv
rmv(a)
remove(a)
delete(z)
a<-1
b<-1l
b<-1L
attr(a)
attributes(a)
attributes(b)
class(a)
class(b)
c<-vector("numeric",10)
as.numeric(b)
class(b)
as.logical(b)
d<-matrix(2,3)
d
remove(d)
d<-matrix(nrow =2,ncol=3)
d
e<-matrix(2,3,4,5)
e
delete(e)
remove(e)
e<-matrix(,3,4)
e
class(e)
z<-1:4
d<-2
z+d
z<-1
z<-1:4
y<-2:3
x+y
remove(y)
remove(z)
y<-1:4
z<-2:3
y+z
remove(e,a,b,c,d,x,y,z)
data<-read.csv("hw1_data.csv")
data<-read.csv("hw1_data")
data<-read.csv("hw1_data.csv","r")
data<-read.table("hw1_data.csv")
data<-read.table("hw1_data.csv",nrows=200)
swirl()
nxt()
library(swirl)
swirl()
x<-c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
play()
?rnorm
nxt()
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
clas(my_data)
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
my_data<-colnames(cnames)
colnames(mydata)<-cnames
colnames(my_data)<-cnames
my_data
if(TRUE == TRUE)
true==TRUE
TRUE==TRUE
(FALSE == TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!5==7
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints > 5
which(ints)
which(ints>7)
any(ints<0)
all(ints > 0)
Sys.Date()
mean(2,4,5)
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x$1},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is","fun!")
submit()
telegram("testando","uhuuuu")
submit()
mad_libs(place=Aruja,adjective = "beautiful",noun = "Park")
mad_libs(place="Aruja",adjective = "beautiful",noun = "Park")
submit()
"I"%p%"love"%p%"R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
x <- 1:10
if(x > 5) {
x <- 0
}
pwd()
wd()
getwd()
setwd(/Users/Eduardo/datasciencecoursera)
setwd('/Users/Eduardo/datasciencecoursera')
getwd()
pollutantmean<-function(directory,pollutant, id=1:332)}
pollutantmean<-function(directory,pollutant, id=1:332){}
pollutantmean<-function(directory,pollutant, id=1:332){}
pollutantmean<-function(directory,pollutant, id=1:332){
{
getwd()
setwd('/Users/Eduardo/datasciencecoursera/RFiles')
getwd()
rm(list=ls(all=TRUE))
poluttantmean <- function(directory, pollutant, id = 1:332){
#folder<- "/Users/Eduardo/datasciencecoursera/RFiles/specdata"
data_list <- list.files(path = directory,pattern = "*.csv")
data_set <- do.call("rbind", lapply(file_list[id], functiont(x) read.csv(paste(folder,x,sep=''),
stringsAsFactors = FALSE )))
}
poluttantmean <- function(directory, pollutant, id = 1:332){
#folder<- "/Users/Eduardo/datasciencecoursera/RFiles/specdata"
data_list <- list.files(path = directory,pattern = "*.csv")
data_set <- do.call("rbind", lapply(file_list[id], functiont(x) read.csv(paste(folder,x,sep=''),
stringsAsFactors = FALSE )))
}
poluttantmean <- function(directory, pollutant, id = 1:332){
#folder<- "/Users/Eduardo/datasciencecoursera/RFiles/specdata"
data_list <- list.files(path = directory,pattern = "*.csv")
data_set <- do.call("rbind", lapply(file_list[id], functiont(x) read.csv(paste(folder,x,sep=''),
stringsAsFactors = FALSE )))
}
poluttantmean <- function(directory, pollutant, id = 1:332){
#folder<- "/Users/Eduardo/datasciencecoursera/RFiles/specdata"
data_list <- list.files(path = directory,pattern = "*.csv")
data_set <- do.call("rbind", lapply(file_list[id], functiont(x) read.csv(paste(folder,x,sep=""),
stringsAsFactors = FALSE )))
}
poluttantmean <- function(directory, pollutant, id = 1:332){
#folder<- "/Users/Eduardo/datasciencecoursera/RFiles/specdata"
data_list <- list.files(path = directory,pattern = "*.csv")
data_set <- do.call("rbind", lapply(file_list[id], functiont(x) read.csv(paste(folder,x,sep=""),
stringsAsFactors = FALSE )))
}
poluttantmean <- function(directory, pollutant, id = 1:332){
#folder<- "/Users/Eduardo/datasciencecoursera/RFiles/specdata"
data_list <- list.files(path = directory,pattern = "*.csv")
data_set <- do.call("rbind", lapply(file_list[id], functiont(x) read.csv(paste(folder,x,sep=""),
stringsAsFactors = FALSE ))))
}
poluttantmean <- function(directory, pollutant, id = 1:332){
#folder<- "/Users/Eduardo/datasciencecoursera/RFiles/specdata"
data_list <- list.files(path = directory,pattern = "*.csv")
data_set <- do.call("rbind", lapply(file_list[id], functiont(x) read.csv(paste(folder,x,sep=""),
stringsAsFactors = FALSE ))
}
poluttantmean <- function(directory, pollutant, id = 1:332){
#folder<- "/Users/Eduardo/datasciencecoursera/RFiles/specdata"
data_list <- list.files(path = directory,pattern = "*.csv")
data_set <- do.call("rbind", lapply(file_list[id], functiont(x), read.csv(paste(folder,x,sep=""),
stringsAsFactors = FALSE )))
}
poluttantmean <- function(directory, pollutant, id = 1:332){
#folder<- "/Users/Eduardo/datasciencecoursera/RFiles/specdata"
data_list <- list.files(path = directory,pattern = "*.csv")
data_set <- do.call("rbind", lapply(file_list[id], functiont(x) read.csv(paste(folder,x,sep=""),
stringsAsFactors = FALSE )))
}
poluttantmean <- function(directory, pollutant, id = 1:332){
#folder<- "/Users/Eduardo/datasciencecoursera/RFiles/specdata"
data_list <- list.files(path = directory,pattern = "*.csv")
data_set <- do.call("rbind", lapply(file_list[id], functiont(x), read.csv(paste(folder,x,sep=""),
stringsAsFactors = FALSE )))
}
View(poluttantmean)
poluttantmean("specdata","sulfate", 2:4)
poluttantmean("specdata","sulfate", 2:4)
poluttantmean("specdata","sulfate", 2:4)
teste <- function(x,y){
x+y
}
teste(2,3)
View(poluttantmean)
View(poluttantmean)
poluttantmean(specdata,sulfate, 2:4)
poluttantmean('specdata',sulfate, 2:4)
poluttantmean(specdata,sulfate, 2:4)
data_set <- do.call("rbind", lapply(file_list[id], functiont(x), read.csv(paste(folder,x,sep=""),
View(poluttantmean)
View(poluttantmean)
View(poluttantmean)
View(poluttantmean)
View(poluttantmean)
